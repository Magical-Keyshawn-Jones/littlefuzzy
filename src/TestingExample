import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import userEvent from '@testing-library/user-event';
import ContactForm from './ContactForm';

test('renders without errors', () => {
    render(<ContactForm />);
});

test('renders the contact form header', () => {

    // Arrange Where our information is coming from
    render(<ContactForm />);

    // Act the behavior we are testing
    const heading = screen.getByText(/Contact Form/i);

    // Assert that the Acted results are expected
    expect(heading).toBeInTheDocument();
    expect(heading).toBeTruthy();
    expect(heading).toHaveTextContent(/contact form/i);
});

test('renders ONE error message if user enters less then 5 characters into firstname.', async () => {
    
    // Arranging where my info is coming from 
    render(<ContactForm/>);

    // Storing first name label inside of a variable
    const firstName5 = screen.getByLabelText(/First Name*/i);

    // Acting out the event.

    // Making a user event associated with the label variable
    userEvent.type(firstName5, '123');

    // Storing a specific 'data-testid' inside of a variable
    const errorMessages = await screen.findAllByTestId('error');
    
    // Asserting that we will see the Acted results
    expect(errorMessages).toHaveLength(1); 
});

test('renders THREE error messages if user enters no values into any fields.', async () => {

    // Arrange where the data is coming from 
    render(<ContactForm/>);

    // // Storing label values inside of variables
    // const firstName = screen.getByLabelText(/First Name*/i);
    // const lastName = screen.getByLabelText(/Last Name*/i);
    // const email = screen.getByLabelText(/Email*/i);
    const button = screen.getByRole('button');
    userEvent.click(button);
    // // Act out the useEvent
    // userEvent.type(firstName,);
    // userEvent.type(lastName,);
    // userEvent.type(email,);
    await waitFor (()=> {
    const errorMessages = screen.getAllByTestId('error');
    expect(errorMessages).toHaveLength(3);
    });
    // Store the data test id's inside of a variable
    // We're using await because of a state change
    
    // Asserting that this test will come to past
    // expect(errorMessages).toHaveLength(3);
});

test('renders ONE error message if user enters a valid first name and last name but no email.', async () => {
    // Arranging where my data is coming from 
    render(<ContactForm/>);

    // Storing first and last name values
    const firstName = screen.getByLabelText(/First Name*/i);
    const lastName = screen.getByLabelText(/Last Name*/i);
    const email = screen.getByLabelText(/Email*/i);
    const button = screen.getByRole('button');
    // Acting a userEvent
    userEvent.type(firstName,'231322');
    userEvent.type(lastName,'sdfds');
    userEvent.type(email,'');
    userEvent.click(button);

    // Storing data test id error values
    await waitFor(()=>{
        const errorMessage = screen.getAllByTestId('error');
        console.log(errorMessage);
    // Asserting the expect results
    expect(errorMessage).toHaveLength(1);
    });
});

test('renders "email must be a valid email address" if an invalid email is entered', async () => {
    // Arranging where my data is coming from 
    render(<ContactForm/>);

    // Storing email and submit button values
    const email = screen.getByLabelText(/Email*/i);
    // const button = screen.getByRole('button');

    // Act out a user event
    userEvent.type(email,'dfdf');
    // userEvent.click(button);

    
        const emailError = await screen.findByText(/email must be a valid email address./i);

        expect(emailError).toBeInTheDocument();
        expect(emailError).toBeTruthy();
        expect(emailError).toHaveTextContent(/email must be a valid email address./i);
});

test('renders "lastName is a required field" if an last name is not entered and the submit button is clicked', async () => {

    // Arrange where our data is coming from 
    render(<ContactForm/>);

    // Storing submit button 
    const button = screen.getByRole('button');

    // Acting the event
    userEvent.click(button);

    // Storing the error Message
    const errorMessage = await screen.findByText(/lastName is a required field./i);

    // Asserting the results
    expect(errorMessage).toBeInTheDocument();
});

test('renders all firstName, lastName and email text when submitted. Does NOT render message if message is not submitted.', async () => {
    // Arranging where the data is coming from 
    render(<ContactForm/>);

    // Storing firstName, LastName, Email Button values
    const firstName = screen.getByLabelText(/First Name*/i);
    const lastName = screen.getByLabelText(/Last Name*/i);
    const email = screen.getByLabelText(/Email*/i);
    const message = screen.getByLabelText(/Message/i);
    const button = screen.getByRole('button');

    // Acting out the use events
    userEvent.type(firstName, 'Keyshawn');
    userEvent.type(lastName, 'Jones');
    userEvent.type(email, 'Keyshawn@gmail.com');
    userEvent.click(button);

    // Asserting results
    await waitFor(()=>{
        expect(firstName).toHaveTextContent(/Keyshawn/i);
    expect(lastName).toHaveTextContent(/Jones/i);
    expect(email).toHaveTextContent(/Keyshawn@gmail.com/i);
    expect(message).not.toBeInTheDocument();
    });
});

// test('renders all fields text when all fields are submitted.', async () => {

// });
